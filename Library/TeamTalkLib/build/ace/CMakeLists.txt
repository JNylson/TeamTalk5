cmake_minimum_required(VERSION 3.1)

project(ACE)

include(ExternalProject)

##################################################
# ACE
##################################################
if (MSVC)

  if (${CMAKE_SIZEOF_VOID_P} EQUAL 8)
    ExternalProject_Add(ACE-win64
      GIT_REPOSITORY    https://github.com/bear101/ACE
      GIT_TAG           4933f7d4b92
      GIT_SUBMODULES_RECURSE TRUE
      GIT_SHALLOW       TRUE
      UPDATE_COMMAND    ""
      CONFIGURE_COMMAND ""
      BUILD_IN_SOURCE   TRUE
      BUILD_COMMAND     cd ACE
      COMMAND           set SSL_ROOT=${OPENSSL_DIR}
      COMMAND           build.bat
      COMMAND           msbuild -maxCpuCount ${PLATFORMTOOLSET} /p:Platform=x64 ace\\ace.sln -target:ACE /property:Configuration=Debug
      COMMAND           msbuild -maxCpuCount ${PLATFORMTOOLSET} /p:Platform=x64 ace\\ace.sln -target:ACE /property:Configuration=Release
      COMMAND           msbuild -maxCpuCount ${PLATFORMTOOLSET} /p:Platform=x64 ace\\ace.sln -target:SSL /property:Configuration=Debug
      COMMAND           msbuild -maxCpuCount ${PLATFORMTOOLSET} /p:Platform=x64 ace\\ace.sln -target:SSL /property:Configuration=Release
      COMMAND           msbuild -maxCpuCount ${PLATFORMTOOLSET} /p:Platform=x64 protocols\\protocols.sln -target:INet /property:Configuration=Debug
      COMMAND           msbuild -maxCpuCount ${PLATFORMTOOLSET} /p:Platform=x64 protocols\\protocols.sln -target:INet /property:Configuration=Release
      COMMAND           msbuild -maxCpuCount ${PLATFORMTOOLSET} /p:Platform=x64 protocols\\protocols.sln -target:INet_SSL /property:Configuration=Debug
      COMMAND           msbuild -maxCpuCount ${PLATFORMTOOLSET} /p:Platform=x64 protocols\\protocols.sln -target:INet_SSL /property:Configuration=Release
      INSTALL_COMMAND   ""
      DEPENDS           openssl-win64
      )
    ExternalProject_Get_Property(ACE-win64 SOURCE_DIR)
    set (ACE_DIR ${SOURCE_DIR}/ACE)
    set (ACE_DEPEND ACE-win64)
  else()
    ExternalProject_Add(ACE-win32
      GIT_REPOSITORY    https://github.com/bear101/ACE
      GIT_TAG           4933f7d4b92
      GIT_SUBMODULES_RECURSE TRUE
      GIT_SHALLOW       TRUE
      UPDATE_COMMAND    ""
      CONFIGURE_COMMAND ""
      BUILD_IN_SOURCE   TRUE
      BUILD_COMMAND     cd ACE
      COMMAND           set SSL_ROOT=${OPENSSL_DIR}
      COMMAND           build.bat
      COMMAND           msbuild -maxCpuCount ${PLATFORMTOOLSET} /p:Platform=win32 ace\\ace.sln -target:ACE /property:Configuration=Debug
      COMMAND           msbuild -maxCpuCount ${PLATFORMTOOLSET} /p:Platform=win32 ace\\ace.sln -target:ACE /property:Configuration=Release
      COMMAND           msbuild -maxCpuCount ${PLATFORMTOOLSET} /p:Platform=win32 ace\\ace.sln -target:SSL /property:Configuration=Debug
      COMMAND           msbuild -maxCpuCount ${PLATFORMTOOLSET} /p:Platform=win32 ace\\ace.sln -target:SSL /property:Configuration=Release
      COMMAND           msbuild -maxCpuCount ${PLATFORMTOOLSET} /p:Platform=win32 protocols\\protocols.sln -target:INet /property:Configuration=Debug
      COMMAND           msbuild -maxCpuCount ${PLATFORMTOOLSET} /p:Platform=win32 protocols\\protocols.sln -target:INet /property:Configuration=Release
      COMMAND           msbuild -maxCpuCount ${PLATFORMTOOLSET} /p:Platform=win32 protocols\\protocols.sln -target:INet_SSL /property:Configuration=Debug
      COMMAND           msbuild -maxCpuCount ${PLATFORMTOOLSET} /p:Platform=win32 protocols\\protocols.sln -target:INet_SSL /property:Configuration=Release
      INSTALL_COMMAND   ""
      DEPENDS           openssl-win32
      )
    ExternalProject_Get_Property(ACE-win32 SOURCE_DIR)
    set (ACE_DIR ${SOURCE_DIR}/ACE)
    set (ACE_DEPEND ACE-win32)
  endif()

  # Autogenerated paths must be created prior for
  # INTERFACE_INCLUDE_DIRECTORIES to work (target_include_directories ... INTERFACE ...)
  file(MAKE_DIRECTORY ${ACE_DIR})
  file(MAKE_DIRECTORY ${ACE_DIR}/protocols)

  add_library(ace STATIC IMPORTED GLOBAL)
  add_dependencies(ace ${ACE_DEPEND})
  target_include_directories (ace INTERFACE ${ACE_DIR})
  set_target_properties(ace PROPERTIES
    IMPORTED_LOCATION_DEBUG ${ACE_DIR}/lib/$(PlatformName)/ACEsd.lib
    IMPORTED_LOCATION ${ACE_DIR}/lib/$(PlatformName)/ACEs.lib)

  add_library(ace_ssl STATIC IMPORTED GLOBAL)

  set_target_properties(ace_ssl PROPERTIES
    IMPORTED_LOCATION_DEBUG ${ACE_DIR}/lib/$(PlatformName)/ACE_SSLsd.lib
    IMPORTED_LOCATION ${ACE_DIR}/lib/$(PlatformName)/ACE_SSLs.lib)
  target_link_libraries(ace_ssl INTERFACE ace openssl-crypto openssl-ssl)

  add_library(ace_inet STATIC IMPORTED GLOBAL)

  target_include_directories (ace_inet INTERFACE ${ACE_DIR}/protocols)
  set_target_properties(ace_inet PROPERTIES
    IMPORTED_LOCATION_DEBUG ${ACE_DIR}/lib/$(PlatformName)/ACE_INetsd.lib
    IMPORTED_LOCATION ${ACE_DIR}/lib/$(PlatformName)/ACE_INets.lib)
  target_link_libraries(ace_inet INTERFACE ace)

  add_library(ace_inet_ssl STATIC IMPORTED GLOBAL)

  set_target_properties(ace_inet_ssl PROPERTIES
    IMPORTED_LOCATION_DEBUG ${ACE_DIR}/lib/$(PlatformName)/ACE_INet_SSLsd.lib
    IMPORTED_LOCATION ${ACE_DIR}/lib/$(PlatformName)/ACE_INet_SSLs.lib)
  target_link_libraries(ace_inet_ssl INTERFACE ace_inet ace_ssl)

elseif (${CMAKE_SYSTEM_NAME} MATCHES "Darwin")

  ExternalProject_Add(MPC
    GIT_REPOSITORY    https://github.com/bear101/MPC
    GIT_TAG           ACE+TAO-6_5_12
    GIT_SUBMODULES_RECURSE TRUE
    GIT_SHALLOW       TRUE
    UPDATE_COMMAND    ""
    CONFIGURE_COMMAND ""
    BUILD_COMMAND     ""
    INSTALL_COMMAND   ""
    )
  ExternalProject_Get_Property(MPC SOURCE_DIR)
  set (MPC_DIR ${SOURCE_DIR})

  ExternalProject_Add(ACE-src
    GIT_REPOSITORY    https://github.com/bear101/ACE
    GIT_TAG           4b99a3e24c9
    GIT_SUBMODULES_RECURSE TRUE
    GIT_SHALLOW       TRUE
    INSTALL_DIR       install
    UPDATE_COMMAND    ""
    # Create 'platform_macros.GNU'
    CONFIGURE_COMMAND echo "shared_libs=0" > <SOURCE_DIR>/ACE/include/makeinclude/platform_macros.GNU
    COMMAND           echo "static_libs_only=1" >> <SOURCE_DIR>/ACE/include/makeinclude/platform_macros.GNU
    COMMAND           echo "ssl=1" >> <SOURCE_DIR>/ACE/include/makeinclude/platform_macros.GNU
    COMMAND           echo "ipv6=1" >> <SOURCE_DIR>/ACE/include/makeinclude/platform_macros.GNU
    COMMAND           echo "c++11=1" >> <SOURCE_DIR>/ACE/include/makeinclude/platform_macros.GNU
    COMMAND           echo "include <SOURCE_DIR>/ACE/include/makeinclude/platform_macosx_mojave.GNU" >> <SOURCE_DIR>/ACE/include/makeinclude/platform_macros.GNU
    COMMAND           echo "CPPFLAGS+=-mmacosx-version-min=${CMAKE_OSX_DEPLOYMENT_TARGET}" >> <SOURCE_DIR>/ACE/include/makeinclude/platform_macros.GNU
    COMMAND           echo "LDFLAGS+=-mmacosx-version-min=${CMAKE_OSX_DEPLOYMENT_TARGET}" >> <SOURCE_DIR>/ACE/include/makeinclude/platform_macros.GNU
    COMMAND           echo "SSL_ROOT=${OPENSSL_DIR}" >> <SOURCE_DIR>/ACE/include/makeinclude/platform_macros.GNU
    COMMAND           echo "INSTALL_PREFIX=<INSTALL_DIR>" >> <SOURCE_DIR>/ACE/include/makeinclude/platform_macros.GNU
    # Create 'config.h'
    COMMAND           echo "#define ACE_HAS_IPV6 1" > <SOURCE_DIR>/ACE/ace/config.h
    COMMAND           echo "#define ACE_HAS_CPP11" >> <SOURCE_DIR>/ACE/ace/config.h
    COMMAND           echo "#include \"ace/config-macosx.h\"" >> <SOURCE_DIR>/ACE/ace/config.h
    # Setup MPC
    COMMAND           ln -sf ${MPC_DIR} <SOURCE_DIR>/ACE/MPC
    # Generate build configuration for ACE
    COMMAND           export ACE_ROOT=<SOURCE_DIR>/ACE && cd <SOURCE_DIR>/ACE/ace && <SOURCE_DIR>/ACE/bin/mwc.pl -type gnuace -recurse
    # Generate build configuration for protocols (INet)
    COMMAND           export ACE_ROOT=<SOURCE_DIR>/ACE && cd <SOURCE_DIR>/ACE/protocols/ace/INet && <SOURCE_DIR>/ACE/bin/mwc.pl -type gnuace -recurse
    BUILD_IN_SOURCE   TRUE
    BUILD_COMMAND     export ACE_ROOT=<SOURCE_DIR>/ACE && cd <SOURCE_DIR>/ACE/ace && make -j4
    COMMAND           export ACE_ROOT=<SOURCE_DIR>/ACE && cd <SOURCE_DIR>/ACE/protocols/ace/INet && make -j4
    INSTALL_COMMAND   export ACE_ROOT=<SOURCE_DIR>/ACE && cd <SOURCE_DIR>/ACE/ace && make install
    COMMAND           export ACE_ROOT=<SOURCE_DIR>/ACE && cd <SOURCE_DIR>/ACE/protocols/ace/INet && make install
    DEPENDS           MPC openssl-src
    BUILD_BYPRODUCTS  <INSTALL_DIR>/lib/libACE.a
        <INSTALL_DIR>/lib/libACE_SSL.a
        <INSTALL_DIR>/lib/libACE_INet.a
        <INSTALL_DIR>/lib/libACE_INet_SSL.a
    )
  ExternalProject_Get_Property(ACE-src INSTALL_DIR)

  file(MAKE_DIRECTORY ${INSTALL_DIR}/include)

  add_library(ace STATIC IMPORTED GLOBAL)
  add_dependencies(ace ACE-src)
  target_include_directories (ace INTERFACE ${INSTALL_DIR}/include)
  set_target_properties(ace PROPERTIES
    IMPORTED_LOCATION ${INSTALL_DIR}/lib/libACE.a)

  add_library(ace_ssl STATIC IMPORTED GLOBAL)
  target_include_directories (ace_ssl INTERFACE ${INSTALL_DIR}/include)
  set_target_properties(ace_ssl PROPERTIES
    IMPORTED_LOCATION ${INSTALL_DIR}/lib/libACE_SSL.a)
  target_link_libraries(ace_ssl INTERFACE ace openssl-ssl openssl-crypto)

  add_library(ace_inet STATIC IMPORTED GLOBAL)
  target_include_directories (ace_inet INTERFACE ${INSTALL_DIR}/include)
  set_target_properties(ace_inet PROPERTIES
    IMPORTED_LOCATION ${INSTALL_DIR}/lib/libACE_INet.a)
  target_link_libraries(ace_inet INTERFACE ace)

  add_library(ace_inet_ssl STATIC IMPORTED GLOBAL)
  target_include_directories (ace_inet_ssl INTERFACE ${INSTALL_DIR}/include)
  set_target_properties(ace_inet_ssl PROPERTIES
    IMPORTED_LOCATION ${INSTALL_DIR}/lib/libACE_INet_SSL.a)
  target_link_libraries(ace_inet_ssl INTERFACE ace_inet ace_ssl)

elseif (${CMAKE_SYSTEM_NAME} MATCHES "iOS")

  if ("armv7" STREQUAL "${CMAKE_OSX_ARCHITECTURES}" OR "arm64" STREQUAL "${CMAKE_OSX_ARCHITECTURES}")
    set (ACE_CPPFLAGS -fembed-bitcode -miphoneos-version-min=${CMAKE_OSX_DEPLOYMENT_TARGET})
    set (ACE_TARGET HARDWARE)
    set (ACE_EXPORT export ACE_ROOT=<SOURCE_DIR>/ACE)
  else()
    set (ACE_CPPFLAGS -mios-simulator-version-min=${CMAKE_OSX_DEPLOYMENT_TARGET})
    set (ACE_TARGET SIMULATOR)
    set (ACE_EXPORT export ACE_ROOT=<SOURCE_DIR>/ACE)
  endif()

  ExternalProject_Add(MPC
    GIT_REPOSITORY    https://github.com/bear101/MPC
    GIT_TAG           ACE+TAO-6_5_12
    GIT_SUBMODULES_RECURSE TRUE
    GIT_SHALLOW       TRUE
    UPDATE_COMMAND    ""
    CONFIGURE_COMMAND ""
    BUILD_COMMAND     ""
    INSTALL_COMMAND   ""
    )
  ExternalProject_Get_Property(MPC SOURCE_DIR)
  set (MPC_DIR ${SOURCE_DIR})

  ExternalProject_Add(ACE-src
    GIT_REPOSITORY    https://github.com/bear101/ACE
    GIT_TAG           f1f6fade7da
    GIT_SUBMODULES_RECURSE TRUE
    GIT_SHALLOW       TRUE
    INSTALL_DIR       install
    UPDATE_COMMAND    ""
    # Create 'platform_macros.GNU'
    CONFIGURE_COMMAND echo "shared_libs=0" > <SOURCE_DIR>/ACE/include/makeinclude/platform_macros.GNU
    COMMAND           echo "static_libs_only=1" >> <SOURCE_DIR>/ACE/include/makeinclude/platform_macros.GNU
    COMMAND           echo "ssl=1" >> <SOURCE_DIR>/ACE/include/makeinclude/platform_macros.GNU
    COMMAND           echo "ipv6=1" >> <SOURCE_DIR>/ACE/include/makeinclude/platform_macros.GNU
    COMMAND           echo "c++11=1" >> <SOURCE_DIR>/ACE/include/makeinclude/platform_macros.GNU
    COMMAND           echo "IPHONE_TARGET=${ACE_TARGET}" >> <SOURCE_DIR>/ACE/include/makeinclude/platform_macros.GNU
    COMMAND           echo "include <SOURCE_DIR>/ACE/include/makeinclude/platform_macosx_iOS.GNU" >> <SOURCE_DIR>/ACE/include/makeinclude/platform_macros.GNU
    COMMAND           echo "IPHONE_HARDWARE_ARCHITECTURE=${CMAKE_OSX_ARCHITECTURES}" >> <SOURCE_DIR>/ACE/include/makeinclude/platform_macros.GNU
    COMMAND           echo "CPPFLAGS+=${ACE_CPPFLAGS}" >> <SOURCE_DIR>/ACE/include/makeinclude/platform_macros.GNU
    COMMAND           echo "LDFLAGS+=${ACE_CPPFLAGS}" >> <SOURCE_DIR>/ACE/include/makeinclude/platform_macros.GNU
    COMMAND           echo "SSL_ROOT=${OPENSSL_DIR}" >> <SOURCE_DIR>/ACE/include/makeinclude/platform_macros.GNU
    COMMAND           echo "INSTALL_PREFIX=<INSTALL_DIR>" >> <SOURCE_DIR>/ACE/include/makeinclude/platform_macros.GNU
    # Create 'config.h'
    COMMAND           echo "#define ACE_HAS_IPV6 1" > <SOURCE_DIR>/ACE/ace/config.h
    COMMAND           echo "#define ACE_HAS_CPP11" >> <SOURCE_DIR>/ACE/ace/config.h
    COMMAND           echo "#include \"config-macosx-iOS.h\"" >> <SOURCE_DIR>/ACE/ace/config.h
    # Setup MPC
    COMMAND           ln -sf ${MPC_DIR} <SOURCE_DIR>/ACE/MPC
    # Generate build configuration for ACE
    COMMAND           ${ACE_EXPORT} && cd <SOURCE_DIR>/ACE/ace && <SOURCE_DIR>/ACE/bin/mwc.pl -type gnuace -recurse
    # Generate build configuration for protocols (INet)
    COMMAND           ${ACE_EXPORT} && cd <SOURCE_DIR>/ACE/protocols/ace/INet && <SOURCE_DIR>/ACE/bin/mwc.pl -type gnuace -recurse
    BUILD_IN_SOURCE   TRUE
    BUILD_COMMAND     ${ACE_EXPORT} && cd <SOURCE_DIR>/ACE/ace && make -j4
    COMMAND           ${ACE_EXPORT} && cd <SOURCE_DIR>/ACE/protocols/ace/INet && make -j4
    INSTALL_COMMAND   ${ACE_EXPORT} && cd <SOURCE_DIR>/ACE/ace && make install
    COMMAND           ${ACE_EXPORT} && cd <SOURCE_DIR>/ACE/protocols/ace/INet && make install
    DEPENDS           MPC openssl-src
    BUILD_BYPRODUCTS  <INSTALL_DIR>/lib/libACE.a
        <INSTALL_DIR>/lib/libACE_SSL.a
        <INSTALL_DIR>/lib/libACE_INet.a
        <INSTALL_DIR>/lib/libACE_INet_SSL.a
    )
  ExternalProject_Get_Property(ACE-src INSTALL_DIR)

  file(MAKE_DIRECTORY ${INSTALL_DIR}/include)

  add_library(ace STATIC IMPORTED GLOBAL)
  add_dependencies(ace ACE-src)
  target_include_directories (ace INTERFACE ${INSTALL_DIR}/include)
  set_target_properties(ace PROPERTIES
    IMPORTED_LOCATION ${INSTALL_DIR}/lib/libACE.a)

  add_library(ace_ssl STATIC IMPORTED GLOBAL)
  target_include_directories (ace_ssl INTERFACE ${INSTALL_DIR}/include)
  set_target_properties(ace_ssl PROPERTIES
    IMPORTED_LOCATION ${INSTALL_DIR}/lib/libACE_SSL.a)
  target_link_libraries(ace_ssl INTERFACE ace openssl-ssl openssl-crypto)

  add_library(ace_inet STATIC IMPORTED GLOBAL)
  target_include_directories (ace_inet INTERFACE ${INSTALL_DIR}/include)
  set_target_properties(ace_inet PROPERTIES
    IMPORTED_LOCATION ${INSTALL_DIR}/lib/libACE_INet.a)
  target_link_libraries(ace_inet INTERFACE ace)

  add_library(ace_inet_ssl STATIC IMPORTED GLOBAL)
  target_include_directories (ace_inet_ssl INTERFACE ${INSTALL_DIR}/include)
  set_target_properties(ace_inet_ssl PROPERTIES
    IMPORTED_LOCATION ${INSTALL_DIR}/lib/libACE_INet_SSL.a)
  target_link_libraries(ace_inet_ssl INTERFACE ace_inet ace_ssl)

elseif (${CMAKE_SYSTEM_NAME} MATCHES "Linux")

  ExternalProject_Add(MPC
    GIT_REPOSITORY    https://github.com/bear101/MPC
    GIT_TAG           ACE+TAO-6_5_12
    UPDATE_COMMAND    ""
    CONFIGURE_COMMAND ""
    BUILD_COMMAND     ""
    INSTALL_COMMAND   ""
    )
  ExternalProject_Get_Property(MPC SOURCE_DIR)
  set (MPC_DIR ${SOURCE_DIR})

  ExternalProject_Add(ACE-src
    GIT_REPOSITORY    https://github.com/bear101/ACE
    GIT_TAG           f1f6fade7da
    INSTALL_DIR       install
    UPDATE_COMMAND    ""
    # Create 'platform_macros.GNU'
    CONFIGURE_COMMAND echo "shared_libs=0" > <SOURCE_DIR>/ACE/include/makeinclude/platform_macros.GNU
    COMMAND           echo "static_libs_only=1" >> <SOURCE_DIR>/ACE/include/makeinclude/platform_macros.GNU
    COMMAND           echo "ssl=1" >> <SOURCE_DIR>/ACE/include/makeinclude/platform_macros.GNU
    COMMAND           echo "ipv6=1" >> <SOURCE_DIR>/ACE/include/makeinclude/platform_macros.GNU
    COMMAND           echo "c++11=1" >> <SOURCE_DIR>/ACE/include/makeinclude/platform_macros.GNU
    COMMAND           echo "include <SOURCE_DIR>/ACE/include/makeinclude/platform_linux.GNU" >> <SOURCE_DIR>/ACE/include/makeinclude/platform_macros.GNU
    COMMAND           echo "CPPFLAGS+=-fPIC -DPIC" >> <SOURCE_DIR>/ACE/include/makeinclude/platform_macros.GNU
    COMMAND           echo "LDFLAGS+=-fPIC" >> <SOURCE_DIR>/ACE/include/makeinclude/platform_macros.GNU
    COMMAND           echo "INSTALL_PREFIX=<INSTALL_DIR>" >> <SOURCE_DIR>/ACE/include/makeinclude/platform_macros.GNU
    # Create 'config.h'
    COMMAND           echo "#define ACE_AS_STATIC_LIBS 1" > <SOURCE_DIR>/ACE/ace/config.h
    COMMAND           echo "#define ACE_HAS_IPV6 1" > <SOURCE_DIR>/ACE/ace/config.h
    COMMAND           echo "#define ACE_HAS_CPP11" >> <SOURCE_DIR>/ACE/ace/config.h
    COMMAND           echo "#include \"ace/config-linux.h\"" >> <SOURCE_DIR>/ACE/ace/config.h
    # Setup MPC
    COMMAND           ln -sf ${MPC_DIR} <SOURCE_DIR>/ACE/MPC
    # Generate build configuration for ACE
    COMMAND           export ACE_ROOT=<SOURCE_DIR>/ACE && cd <SOURCE_DIR>/ACE/ace && <SOURCE_DIR>/ACE/bin/mwc.pl -type gnuace -recurse
    # Generate build configuration for protocols (INet)
    COMMAND           export ACE_ROOT=<SOURCE_DIR>/ACE && cd <SOURCE_DIR>/ACE/protocols/ace/INet && <SOURCE_DIR>/ACE/bin/mwc.pl -type gnuace -recurse
    BUILD_IN_SOURCE   TRUE
    BUILD_COMMAND     export ACE_ROOT=<SOURCE_DIR>/ACE && cd <SOURCE_DIR>/ACE/ace && make -j4
    COMMAND           export ACE_ROOT=<SOURCE_DIR>/ACE && cd <SOURCE_DIR>/ACE/protocols/ace/INet && make -j4
    INSTALL_COMMAND   export ACE_ROOT=<SOURCE_DIR>/ACE && cd <SOURCE_DIR>/ACE/ace && make install
    COMMAND           export ACE_ROOT=<SOURCE_DIR>/ACE && cd <SOURCE_DIR>/ACE/protocols/ace/INet && make install
    DEPENDS           MPC
    BUILD_BYPRODUCTS  <INSTALL_DIR>/lib/libACE.a
        <INSTALL_DIR>/lib/libACE_SSL.a
        <INSTALL_DIR>/lib/libACE_INet.a
        <INSTALL_DIR>/lib/libACE_INet_SSL.a
    )
  ExternalProject_Get_Property(ACE-src INSTALL_DIR)

  file(MAKE_DIRECTORY ${INSTALL_DIR}/include)

  add_library(ace STATIC IMPORTED GLOBAL)
  add_dependencies(ace ACE-src)
  if (${CMAKE_VERSION} VERSION_LESS "3.11.0")
    set_target_properties(ace PROPERTIES
      INTERFACE_INCLUDE_DIRECTORIES ${INSTALL_DIR}/include
      IMPORTED_LOCATION ${INSTALL_DIR}/lib/libACE.a)
  else()
    target_include_directories (ace INTERFACE ${INSTALL_DIR}/include)
    set_target_properties(ace PROPERTIES
      IMPORTED_LOCATION ${INSTALL_DIR}/lib/libACE.a)
  endif()

  add_library(ace_ssl STATIC IMPORTED GLOBAL)
  set_target_properties(ace_ssl PROPERTIES
    IMPORTED_LOCATION ${INSTALL_DIR}/lib/libACE_SSL.a)
  target_link_libraries(ace_ssl INTERFACE ace ssl crypto)

  add_library(ace_inet STATIC IMPORTED GLOBAL)
  set_target_properties(ace_inet PROPERTIES
    IMPORTED_LOCATION ${INSTALL_DIR}/lib/libACE_INet.a)
  target_link_libraries(ace_inet INTERFACE ace)

  add_library(ace_inet_ssl STATIC IMPORTED GLOBAL)
  set_target_properties(ace_inet_ssl PROPERTIES
    IMPORTED_LOCATION ${INSTALL_DIR}/lib/libACE_INet_SSL.a)
  target_link_libraries(ace_inet_ssl INTERFACE ace_inet ace_ssl)

endif()
